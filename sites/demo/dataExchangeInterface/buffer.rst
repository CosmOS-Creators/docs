Buffer
=============================

The buffer module is the part of CosmOS data exchange interface. It is mainly
used for the inter-program critical tasks communication, but not constrained to
that. Threads can also use buffer interface but we strongly suggest to use channels
to increase overall performance of the system. For more information please read the buffer section in the CosmOS whitepaper.

Configuration
--------------
1. Open the CustomBox
```````````````````````
Then we have to open from the left panel Buffers tab to see all configured buffer elements in the system as it is shown in the picture below.

.. image:: ../../../images/demos/buffer.png

2. Configure or add new buffer
````````````````````````````````
- Name of the buffer is set to exampleBuffer, this is the name of the buffer which will be used to generate buffer identifier used in for the buffer read and write operations.
- Buffer size is set to 32 Bytes, this parameter defines the size of the buffer array mapped in the operating system memory.
- Double buffer checkbox is not checked, this parameter will instead of one buffer generate double buffer.
- List of schedulables which have read access to this buffer contains Logger_thread which means that this thread can read from this buffer.
- List of schedulables which have write access to this buffer contains Logger_thread which means that no schedulable is able to write to this buffer, if we want to add for instance IdleThread_CM4 we just click on **add to list** button.

3. Generate
```````````````
After we click on the **Generate** button in the CustomBox left panel on the bottom, the buffer configuration
code is generated and we can use it in the application layer. The code examples of read and write operations are shown in the next section.

Code examples
--------------

Buffer read
```````````````
Buffer read is done by the **buffer_readArray** function that takes as input:

- buffer identifier generated by the CustomBox in the format bufferName_id, in our case exampleBuffer_id
- address of array where the read data will be written
- size of the array where the read data will be written

.. code-block:: C

    #include <buffer.h>
    #include <errorHandler.h>

    CosmOS_BufferStateType bufferState;

    int exampleBufferRead[10];
    bufferState = buffer_readArray( exampleBuffer_id,
        &exampleBufferRead, sizeof( exampleBufferRead ) );

    if( errorHandler_isError( bufferState ) )
    {
        //error was returned, check its value
    }

Return values
"""""""""""""""
``BUFFER_STATE_ENUM__OK`` array was read and buffer is not empty

``BUFFER_STATE_ENUM__EMPTY`` array was read and buffer is empty now

``BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_FULL_CELLS_NUM`` user wants to read more bytes than is actually full in buffer

``BUFFER_STATE_ENUM__ERROR_BUFFER_OCCUPIED`` somebody else is reading from the buffer

``BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED`` schedulable does not have permissions to read to the buffer

``BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED`` user wants to read data and write them to the protected memory

``BUFFER_STATE_ENUM__ERROR_INVALID_ID`` buffer with used identifier does not exist in the system


Buffer write
```````````````
Buffer write is done by the **buffer_writeArray** function that takes as input:

- buffer identifier generated by the CustomBox in the format bufferName_id, in our case exampleBuffer_id
- address of array to write
- size of the array to write

.. code-block:: C

    #include <buffer.h>
    #include <errorHandler.h>

    CosmOS_BufferStateType bufferState;

    int exampleBufferWrite = 100;
    bufferState = buffer_writeArray( exampleBuffer_id,
        &exampleBufferWrite, sizeof( exampleBufferWrite ) );

    if( errorHandler_isError( bufferState ) )
    {
        //error was returned, check its value
    }

Return values
"""""""""""""""
``BUFFER_STATE_ENUM__OK`` array was written and buffer is not full

``BUFFER_STATE_ENUM__FULL`` array was written and buffer is full now

``BUFFER_STATE_ENUM__ERROR_SIZE_BIGGER_THAN_EMPTY_CELLS`` user wants to write more bytes than is actually empty in buffer

``BUFFER_STATE_ENUM__ERROR_BUFFER_OCCUPIED`` somebody else is writting to the buffer

``BUFFER_STATE_ENUM__ERROR_ACCESS_DENIED`` schedulable does not have permissions to write to the buffer

``BUFFER_STATE_ENUM__ERROR_INPUT_ARRAY_IS_PROTECTED`` user wants to write data from the protected memory (will be obsolete and allowed)

``BUFFER_STATE_ENUM__ERROR_INVALID_ID`` buffer with used identifier does not exist in the system
